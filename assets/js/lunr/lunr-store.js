var store = [{
        "title": "Overview",
        "excerpt":"                  RACECAR/X            ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/",
        "teaser": null
      },{
        "title": "Bill of Materials",
        "excerpt":"price ~3000€                  Component       Where to buy       Specifications       Comments                               1:10 Race Car chassis       TRAXXAS Slash 4x4 Platinum (499,95€ )       TRAXXAS Slash 4x4 Platinum, Model 6804R       only chassis and brushless motor are used.                         Front Bumper       JConcepts 2173 - Traxxas Slash 4X4 - Speed Run Front Bumper Conversion Kit (29,95€)                                         2 x LiPo battery 3S       ZIPPY Flightmax 5000mAh 3S1P 20C (2 x 23,28 €  )       ZIPPY Flightmax 5000mAh 3S1P 20C       One for car, one for Jetson                         2 x LiPo voltage checker       lipo voltage checker (2 x 1,86€)                                         Compute module       Nvidia Jetson AGX Xavier Development Kit (1349,00€ )       User Guide Nvidia Forum Documentation FAQ Technical Blog       register for the Nvidia developmenter program for special discount.                         ESC       Enertion FOCBOX (159,00€)       VESC Project       alternative: Turnigy SK8-ESC V4.12                         Battery adapter       HXT 4mm bis XT-60 Batterie-Adapter (3,60€)               required to connect FOCBOX with Zippy Lipo                         M.2 SSD       Samsung 970 EVO 500GB, M2 2280 (134,86€)       Samsung 970 EVO NVMe M.2 SSD, 500GB       M.2 Key M HDD                         M.2 Wifi       INTEL Dual Band Wireless-AC 8265 Desktop Kit (31,17€)               includes antennas and can run in access point mode                         10x USB 3.0 hub       ORICO 40W 10 Ports USB 3.0 hub (32,99€)                                         usb c to usb b adapter       USB 3.1 Type C (USB-C) auf Type B (USB-B) Kable                                         2D Lidar       Slamtec RPLidar A1M8 (99,90€)       Introduction and Datasheet                                 IMU       SparkFun MPU-9250 9DoF Razor IMU M0 (34,95€)        Hookup Guide Datasheet MPU-9250 Datasheet SAMD21                                 Camera       OpenMV Cam M7 (77,95€) with fesheye lens(16,95€)       OpenMV Cam M7                                         Intel realsense D435i (~250€)       Intel Realsense D400 DatSheet                                 2 x Hobby glass       25cm x 50cm x 4mm (2 x ~6,00€)                                         M3 standoffs/nuts/etc.       M3 Nylon Black Hex Screw Nut Spacer Standoff (260 pieces)                                         controller       DualShock 4 USB Wireless Adaptor (66,90€) and PlayStation 4 - DualShock 4 Wireless Controller (60,13€)                                   Tools     iFixit Pro Tech Toolkit (59,95€)   iFixit Tragbar Elektroschocks Matte (29,95€)   IMax B6AC V2 Balance Charger (48,99€)   ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/hardware/bom",
        "teaser": null
      },{
        "title": "Software Setup Overview",
        "excerpt":"This tutorial is based on      JetPack 4.3   ROS Melodic   ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/software/",
        "teaser": null
      },{
        "title": "Software Setup - Jetson Xavier",
        "excerpt":"Install JetPack 4.3     Download and install NVIDIA SDK Manager   Note: Select the manual installation mode.  Automatic mode might have issues when starting up in headless mode. See bug 200525134 in the L4T Release Notes   Notes   During first boot I configured racecarx as hostname and   added a user called mark   Enable password-less login via ssh  In order to be able to login via ssh into the racecarx without typing your password, you can create a pair of private / public ssh keys and upload the public key in the ~/.ssh/autorized_keys on the racecarx.   Create the ssh keys   ssh-keygen   upload the public key to racecarx   ssh-copy-id mark@racecarx   Now you schould be able to login without password by typing   ssh mark@racecarx   Extend disk memory  Install M.2 NVMe SSD  JetsonHacks provides a good description for installing the SSD on the NVIDIA Jetson AGX Xavier.   Mount SSD  We mount the partition on the SSD via UUID in order to be robust with respect to potentially changing device identifiers. Especially important if you are using USB devices.   # create the mount point sudo mkdir /XavierSSD500  # find UUID of an ext4 partition on SSD.  # you can search for the label. E.g. label=\"XavierSSD500\" sudo blkid  # backup the original fstab file that sudo cp /etc/fstab /etc/fstab.orig  # add mount information to ssd partition into fstab sudo vim /etc/fstab  # :i (switch to insert mode) # insert UUID=&lt;yout uuid is identified above&gt;  /XavierSSD500 ext4 nosuid,nodev,auto,nouser 0 2 # &lt;ESC&gt; # :wq (write and quit)  # mount the ssd according to new data in fstab sudo mount /XavierSSD500   Move /home to SSD  # create the new home folder on the SSD sudo mkdir /XavierSSD500/home # copy the home folder to the ssd preserving symlinks, permissions, access rights, ... sudo rsync -aXS /home/. /XavierSSD500/home/. sudo mv /home /home.orig; sudo ln -s /XavierSSD500/home /home sudo diff -qr /home /home.orig # diff quietly and move into subfolders    Reboot. If everything works:   sudo rm -rf /home.orig   Move docker data directory to SSD     Stop the docker daemon   sudo service docker stop      Edit configuration file /etc/docker/daemon.json to tell the docker daemon what is the location of the data directory. The content should look like:   {     \"runtimes\": {         \"nvidia\": {             \"path\": \"nvidia-container-runtime\",             \"runtimeArgs\": []         }     },     \"graph\": \"/XavierSSD500/var/lib/docker\" }      Copy the current data directory to the new one   sudo rsync -aP /var/lib/docker/ /XavierSSD500/var/lib/docker      Rename the old docker directory   sudo mv /var/lib/docker /var/lib/docker.old   This is just a sanity check to see that everything is ok and docker daemon will effectively use the new location for its data.      Restart the docker daemon   sudo service docker start      Test   sudo docker run hello-world  This should download and run the hello-world container. Docker should have created several files in /XavierSSD500/var/lib/docker   If everything worked as expected you can delete the old docker folder /var/lib/docker.old. This is only required in case docker was used before and the folder existed.   Add Wifi / Bluetooth  Install Wifi/Bluetooth M.2 module  TODO: HW installation of intel 8265 M.2 module   Enable wifi  JetPack 4.3 should detect the intel 8265 M.2 wifi module out of the box.  You should see the device wlan0 in the Network Manager:   nmcli device   Create a new wlan connection for you ssid.   sudo nmcli connection add ifname wlan0 type wifi ssid \"B3 5GHz\"   Configure the authentication mode to WPA and set the password.   sudo nmcli connection edit wifi-wlan0   configure    ===| nmcli interactive connection editor |===  Editing existing '802-11-wireless' connection: 'wifi-wlan0'  Type 'help' or '?' for available commands. Type 'describe [&lt;setting&gt;.&lt;prop&gt;]' for detailed property description.  You may edit the following settings: connection, 802-11-wireless (wifi), 802-11-wireless-security (wifi-sec), 802-1x, ipv4, ipv6, tc, proxy nmcli&gt; goto wifi You may edit the following properties: ssid, mode, band, channel, bssid, rate, tx-power, mac-address, cloned-mac-address, generate-mac-address-mask, mac-address-blacklist, mtu, seen-bssids, hidden, powersave, mac-address-randomization nmcli 802-11-wireless&gt; set mode infrastructure nmcli 802-11-wireless&gt; back nmcli&gt; goto wifi-sec You may edit the following properties: key-mgmt, wep-tx-keyidx, auth-alg, proto, pairwise, group, pmf, leap-username, wep-key0, wep-key1, wep-key2, wep-key3, wep-key-flags, wep-key-type, psk, psk-flags, leap-password, leap-password-flags, wps-method nmcli 802-11-wireless-security&gt; set key-mgmt wpa-psk nmcli 802-11-wireless-security&gt; set psk myPasswordGoesHere nmcli 802-11-wireless-security&gt; save Connection 'wifi-wlan0' (f425bcdd-c8a5-48b5-906e-b0b002e8aaaa) successfully updated. nmcli 802-11-wireless-security&gt; quit    Enable bluetooth  Check if the 8265 wifi / bluetooth module is detected   lspci   rfkill list   Check if bluetooth devices are blocked   mark@racecarx:~$ rfkill list 0: bluedroid_pm: Bluetooth \tSoft blocked: no \tHard blocked: no 1: phy0: Wireless LAN \tSoft blocked: no \tHard blocked: no 2: hci0: Bluetooth \tSoft blocked: no \tHard blocked: no   if they are soft blocked, then execute   sudo rfkill unblock bluetooth  ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/software/jetson_native",
        "teaser": null
      },{
        "title": "Software Setup - Docker on Jetson Xavier",
        "excerpt":"Login to NGC docker registry  The docker images are created on top of the l4t-base image from the Nvidia GPU Cloud. Before accessing locked NGC content, you must sign up for an NGC account and obtain an API key as explained in the NGC Getting Started Guide. Then log in to the NGC registry from the command line as follows. Log in to the NGC container registry.  $ sudo docker login nvcr.io  When prompted for your user name, enter the following text:  $oauthtoken   The $oauthtoken username is a special user name that indicates that you will authenticate with an API key and not a username and password. When prompted for your password, enter your NGC API key as shown in the following example.   Username: $oauthtoken Password: yourAuthTokenFromNGC   Tip: When you get your API key, copy it to the clipboard so that you can paste the API key into the command shell when you are prompted for your password.   After successful login you will get the following message   WARNING! Your password will be stored unencrypted in /home/mark/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store  Login Succeeded   Reference: Logging in to the NGC container registry   Get the installation scripts   mkdir ~/racecarx cd ~/racecarx git clone https://github.com/MarkBroerkens/RACECARX.git   Build docker container  cd RACECARX/software/jetson/docker sudo make build   The docker image supports the following features:      Nvidia base image: l4t-base   ROS   Realsense camera   Initial setup  cd ~/racecarx/RACECARX/software ./installRACECARX_Xavier.sh   Run the docker container in interactive mode   cd ~/racecarx/RACECARX/software/ ./jetson/racecarx.sh   ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/software/jetson_docker",
        "teaser": null
      },{
        "title": "Software Setup - Sensors and Actuators",
        "excerpt":"Controller Sony DualShock 4 V2  sudo apt-get install joystick ls /dev/input jstest /dev/input/js0   Realsense d435i camera  Run the racecarx docker container in interactive mode   ~/racecarx/RACECARX/racecarx.sh   Run the firmware update tool and print the connected devices   rs-fw-update -l   My oputput looks like this   connected devices: 1) Name: Intel RealSense D435I, serial number: xxxxxxxxx, update serial number: xxxxxxxx, firmware version: 05.11.06.250, USB type: 3.2   Find the latest firmware and copy its link  latest firmware   download and install latest firmware. See also here   cd /tmp wget https://downloadmirror.intel.com/29255/eng/D400_Series_Development_FW_5_12_1.zip apt update # gets the index apt-get install unzip # installs unzip unzip D400_Series_Development_FW_5_12_1.zip rs-fw-update -f Signed_Image_UVC_5_12_1_0.bin   we should see the updated firmware version   rs-fw-update -l   Focbox Electronic Speed Control     Get the VESC Tool. The free version is sufficient.   The required Firmware VESC_servoout.bin is available in the vedderb/vesc_tool github repository at res/firmwares/410_o_411_o_412   SparkFun 9DoF Razor IMU M0  Install Arduino Firmware as described here   RPLidar A1M8  INstallation consists of proper configuration of UDEV rules.   ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/software/peripherals",
        "teaser": null
      },{
        "title": "Software Setup - Host PC",
        "excerpt":"MacOSX  in order to flash the latest jetpack in the jetson device, you need a Linux machine with Ubuntu 18.04. Note: The Nvidia installer has many dependencies and might lead to some issues after installation. I recommend to install it into a clean Virtual Machine.      Prepare Virtual Machine with Ubuntu 18.04.   Install Nvidia Jetson SDK Manager   ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/software/host",
        "teaser": null
      },{
        "title": "References",
        "excerpt":"Similar Projects  RACECAR/X is inspired by the following projects.      MIT RACECAR - MIT RACECAR is an open-source powerful platform for robotics research and education.   Jetson racecar   F1/10 Autonomous Racing Competition - international community of researchers, engineers, and autonomous systems enthusiasts. It was originally founded at the University of Pennsylvania in 2016 but has since spread to many other institutions worldwide. Great build instructions and lectures.   OpenZeka Marc - (translated to english)   Hypha-ROS racecar - Low-cost, high speed (600USD, 3 m/s) 1/10 Autonomous ROS RaceCar (with tutorial for beginner)   eagleMK4 - The prototype of autonomous RC car based on MIT Racecar platform   Project Omicron - build a robot for the Robocup@Work competition   JetRacer - an autonomous AI racecar using NVIDIA Jetson Nano   Multi-agent System for non-Holonomic Racing (MuSHR) - an open-source robotic hardware and software platform for learning and researching AI in a the setting of autonomous vehicles and mobile robotics.   Related to Nvidia Jetson      Jetson Nano Tools - Jetson Nano useful tools (setup, examples)   Jetcard install - install script of nvidia jetcard   NVIDIA AI IOT - NVIDIA AI IOT Github repositories   Isaac SDK - the main software toolkit for NVIDIA robotics   Jetson Community Projects   Jetson Zoo - contains instructions for installing various open source add-on packages and frameworks on NVIDIA Jetson, in addition to a collection of DNN models for inferencing.   ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/docs/references/",
        "teaser": null
      },{
        "title": "Teleoperation",
        "excerpt":"          ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/projects/teleoperation",
        "teaser": null
      },{
        "title": "Wall Follower",
        "excerpt":"                   ","categories": [],
        "tags": [],
        "url": "https://markbroerkens.github.io/RACECARX/projects/wall_follower",
        "teaser": null
      }]
